# escape=`
FROM mcr.microsoft.com/windows/servercore:ltsc2019
#FROM mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-2004

# Install NuGet CLI for nuget.exe
ENV NUGET_VERSION 6.1.0
RUN mkdir "%ProgramFiles%\NuGet" `
    && curl -k -fSLo "%ProgramFiles%\NuGet\nuget.exe" https://dist.nuget.org/win-x86-commandline/v%NUGET_VERSION%/nuget.exe
    
#installing 7zip
RUN powershell Write-Host "Install 7zip..."
RUN powershell Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
RUN powershell Install-Module -Name 7Zip4PowerShell -Verbose -Force
RUN powershell Get-Command -Module 7Zip4PowerShell
    
#Installing Cygwin##
RUN powershell Write-Host "Install Cygwin..."
# RUN curl -kLo C:\setup-x86_64.exe https://cygwin.com/setup-x86_64.exe;
# RUN powershell [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
RUN powershell Invoke-WebRequest -Uri https://cygwin.com/setup-x86_64.exe -OutFile C:\setup-x86_64.exe -UseBasicParsing;
RUN powershell Start-Process C:\setup-x86_64.exe -Wait -NoNewWindow -ArgumentList '-q -n -l C:\cygwin64\packages -X -s http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/2020/05/31/142136/ -R C:\cygwin64 -P dos2unix,make,perl,python27,python38,rsync,libxml2,pbzip2,mc';
RUN powershell Remove-Item C:\setup-x86_64.exe;
     
#Path Setup Cygwin##
RUN powershell Write-Host "Set path...";
RUN powershell $env:path = 'C:\cygwin64\bin;\cygwin\bin;' + $env:path;
RUN powershell [Environment]::SetEnvironmentVariable('PATH', $env:path, [EnvironmentVariableTarget]::Machine);
RUN powershell Write-Output $env:path;

# Install VS components
RUN `
    # Install VS Test Agent
    curl -fSLo vs_TestAgent.exe https://aka.ms/vs/17/release/vs_TestAgent.exe `
    && start /w vs_TestAgent.exe --quiet --norestart --nocache --wait `
    && powershell -Command "if ($err = dir $Env:TEMP -Filter dd_setup_*_errors.log | where Length -gt 0 | Get-Content) { throw $err }" `
    && del vs_TestAgent.exe `
    `
    # Install VS Build Tools 
    && curl -fSLo vs_BuildTools.exe https://download.visualstudio.microsoft.com/download/pr/32bd2bc7-34ab-4d3d-abbf-526f0be7a954/fb48d292c89281cecb7a17bcc5aba8d62aa81eddf5a502692ec64e5eb43b801d/vs_BuildTools.exe `
    # Installer won't detect DOTNET_SKIP_FIRST_TIME_EXPERIENCE if ENV is used, must use setx /M
    && setx /M DOTNET_SKIP_FIRST_TIME_EXPERIENCE 1 `
    && start /w vs_BuildTools.exe ^ `
        --add Microsoft.VisualStudio.Workload.MSBuildTools ^ `
        --add Microsoft.VisualStudio.Workload.NetCoreBuildTools ^ `
        --add Microsoft.VisualStudio.Component.SQL.SSDTBuildSku `
        --add Microsoft.Net.Component.4.8.SDK ^ `
        --add Microsoft.Component.ClickOnce.MSBuild ^ `
        --add Microsoft.VisualStudio.Component.WebDeploy ^ `
        --add Microsoft.NetCore.Component.Runtime.3.1 ^ `
        --add Microsoft.NetCore.Component.Runtime.5.0 ^ `
        --add Microsoft.NetCore.Component.Runtime.6.0 ^ `
        --add Microsoft.NetCore.Component.SDK ^ `
        --add Microsoft.VisualStudio.Component.NuGet.BuildTools ^ `
        --add Microsoft.VisualStudio.Web.BuildTools.ComponentGroup ^ `
        --quiet --norestart --nocache --wait `
    && powershell -Command "if ($err = dir $Env:TEMP -Filter dd_setup_*_errors.log | where Length -gt 0 | Get-Content) { throw $err }" `
    && del vs_BuildTools.exe `
    # Cleanup
    && rmdir /S /Q "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer" `
    && powershell Remove-Item -Force -Recurse "%TEMP%\*" `
    && rmdir /S /Q "%ProgramData%\Package Cache"

# Install web targets
RUN curl -fSLo MSBuild.Microsoft.VisualStudio.Web.targets.zip https://dotnetbinaries.blob.core.windows.net/dockerassets/MSBuild.Microsoft.VisualStudio.Web.targets.2020.05.zip `
    && tar -zxf MSBuild.Microsoft.VisualStudio.Web.targets.zip -C "%ProgramFiles(x86)%\Microsoft Visual Studio\2022\BuildTools\MSBuild\Microsoft\VisualStudio\v17.0" `
    && del MSBuild.Microsoft.VisualStudio.Web.targets.zip
RUN powershell Get-ChildItem -Path '"C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Microsoft\VisualStudio\v17.0"' –Recurse


ENV DOTNET_USE_POLLING_FILE_WATCHER=true `
    ROSLYN_COMPILER_LOCATION="C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\Roslyn" `
    # Ngen workaround: https://github.com/microsoft/dotnet-framework-docker/issues/231
    COMPLUS_NGenProtectedProcess_FeatureEnabled=0

# ngen assemblies queued by VS installers - must be done in cmd shell to avoid access issues
# RUN `
#     # Workaround for issues with 64-bit ngen 
#     \Windows\Microsoft.NET\Framework64\v4.0.30319\ngen uninstall "%ProgramFiles(x86)%\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\SecAnnotate.exe" `
#     && \Windows\Microsoft.NET\Framework64\v4.0.30319\ngen uninstall "%ProgramFiles(x86)%\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\WinMDExp.exe" `
#     `
#     && \Windows\Microsoft.NET\Framework64\v4.0.30319\ngen update

# Install PSTools
RUN curl -kfSLo  PSTools.zip https://download.sysinternals.com/files/PSTools.zip `
    && mkdir "%ProgramFiles%\PSTools" `
    && tar -zxf PSTools.zip -C "%ProgramFiles%\PSTools" `
    && del PSTools.zip

# Set PATH in one layer to keep image size down.
RUN powershell setx /M PATH $(${Env:PATH} `
    + \";${Env:ProgramFiles}\PSTools\" `
    + \";${Env:ProgramFiles}\NuGet\" `
    + \";${Env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\TestAgent\Common7\IDE\CommonExtensions\Microsoft\TestWindow\" `
    + \";${Env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\" `
    + \";${Env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\" `
    + \";${Env:ProgramFiles(x86)}\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\" `
    + \";${Env:ProgramFiles(x86)}\Microsoft SDKs\ClickOnce\SignTool\")

# Install Targeting Packs
RUN powershell " `
    rm 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\*'  -r -Force ; `
    $ErrorActionPreference = 'Stop'; `
    $ProgressPreference = 'SilentlyContinue'; `
    @('4.0', '4.5.2', '4.6.2', '4.7.2', '4.8') `
    | %{ `
        Invoke-WebRequest `
            -UseBasicParsing `
            -Uri https://dotnetbinaries.blob.core.windows.net/referenceassemblies/v${_}.zip `
            -OutFile referenceassemblies.zip; `
        Expand-Archive referenceassemblies.zip -DestinationPath \"${Env:ProgramFiles(x86)}\Reference Assemblies\Microsoft\Framework\.NETFramework\"; `
        Remove-Item -Force referenceassemblies.zip; `
    }"

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

ARG tmp2DIR="c:\tmp"

# Folders for binaries
RUN New-Item -ItemType Directory -Force -Path $env:tmp2Dir; `
    New-Item -ItemType Directory -Force -Path C:/ProgramData/ ; `
    New-Item -ItemType Directory -Force -Path C:/ProgramData/Jenkins ; `
    New-Item -ItemType Directory -Force -Path C:/cf ; `
    New-Item -ItemType Directory -Force -Path C:/Java ; `
    New-Item -ItemType Directory -Force -Path C:/java11 ;

# OpenJDK here
#RUN wget https://builds.openlogic.com/downloadJDK/openlogic-openjdk-jre/8u262-b10/openlogic-openjdk-jre-8u262-b10-windows-x64.zip -OutFile $env:tmp2Dir\\openlogic-openjdk-jre-8u262-b10-windows-x64.zip -UseBasicParsing ;
#RUN powershell Expand-Archive $env:tmp2Dir\\openlogic-openjdk-jre-8u262-b10-windows-x64.zip -DestinationPath c:\Java ;
#RUN powershell Get-ChildItem -Path C:\Java\openlogic-openjdk-jre-8u262-b10-win-64 ;
#RUN `
#    $env:path = 'C:\Java\openlogic-openjdk-jre-8u262-b10-win-64\bin;C:\Java\openlogic-openjdk-jre-8u262-b10-win-64;' + $env:path; `
#    [Environment]::SetEnvironmentVariable('PATH', $env:path, [EnvironmentVariableTarget]::Machine); `
#    Write-Output $env:path;
#RUN powershell del $env:tmp2Dir\\openlogic-openjdk-jre-8u262-b10-windows-x64.zip ;
#RUN powershell java -version

RUN `
    wget https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip -OutFile $env:tmp2Dir\\openjdk-11.0.2_windows-x64_bin.zip -UseBasicParsing ;`
    Expand-Archive $env:tmp2Dir\\openjdk-11.0.2_windows-x64_bin.zip -DestinationPath c:\\java11 ; `
    Get-ChildItem -Path C:\\java11\\jdk-11.0.2\\bin;`
    $env:path = 'C:\java11\jdk-11.0.2\bin;' + $env:path; `
    del $env:tmp2Dir\\openjdk-11.0.2_windows-x64_bin.zip;  `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
    Write-Output $env:path;
RUN powershell java -version

# Web Deployer (msdeploy.exe)
RUN powershell curl https://download.microsoft.com/download/0/1/D/01DC28EA-638C-4A22-A57B-4CEF97755C6C/WebDeploy_amd64_en-US.msi -OutFile c:\WebDeploy_amd64_en-US.msi -UseBasicParsing ;
RUN powershell msiexec /i WebDeploy_amd64_en-US.msi LicenseAccepted="0" ADDLOCAL=ALL /quiet /qn /passive /norestart
RUN powershell del C:\WebDeploy_amd64_en-US.msi

ARG VERSION=4.3
ARG GIT_VERSION=2.28.0-rc1
ARG GIT_PATCH_VERSION=1
LABEL Description="This is a base image, which provides the Jenkins agent executable (agent.jar)" Vendor="Jenkins project" Version="${VERSION}"

# GIT here
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 ; `
    $url = $('https://github.com/git-for-windows/git/releases/download/v{0}.windows.{1}/MinGit-{0}-busybox-64-bit.zip' -f $env:GIT_VERSION, $env:GIT_PATCH_VERSION) ; `
    Write-Host "Retrieving $url..." ; `
    Invoke-WebRequest $url -OutFile 'mingit.zip' -UseBasicParsing ; `
    Expand-Archive mingit.zip -DestinationPath c:\mingit ; `
    Remove-Item mingit.zip -Force ; `
    setx /M PATH $('c:\mingit\cmd;{0}' -f $env:PATH)

# Jenkins stuff here
ARG user=jenkins
ARG AGENT_FILENAME=agent.jar
ARG AGENT_HASH_FILENAME=$AGENT_FILENAME.sha1

RUN net user "$env:user" /add /expire:never /passwordreq:no ; `
    net localgroup Administrators /add $env:user ; `
    Set-LocalUser -Name $env:user -PasswordNeverExpires $true;


ARG AGENT_ROOT=C:/Users/$user
ARG AGENT_WORKDIR=${AGENT_ROOT}/Work
ENV AGENT_WORKDIR=${AGENT_WORKDIR}

# Get the Agent from the Jenkins Artifacts Repository
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 ; `
    Invoke-WebRequest $('https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/{0}/remoting-{0}.jar' -f $env:VERSION) -OutFile $(Join-Path C:/ProgramData/Jenkins $env:AGENT_FILENAME) -UseBasicParsing ; `
    Invoke-WebRequest $('https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/{0}/remoting-{0}.jar.sha1' -f $env:VERSION) -OutFile (Join-Path C:/ProgramData/Jenkins $env:AGENT_HASH_FILENAME) -UseBasicParsing ; `
    if ((Get-FileHash (Join-Path C:/ProgramData/Jenkins $env:AGENT_FILENAME) -Algorithm SHA1).Hash -ne (Get-Content (Join-Path C:/ProgramData/Jenkins $env:AGENT_HASH_FILENAME))) {exit 1} ; `
    Remove-Item -Force (Join-Path C:/ProgramData/Jenkins $env:AGENT_HASH_FILENAME)

USER $user

#Node here
ENV NODE_VERSION 16.15.1 
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 ; `
Invoke-WebRequest $('https://nodejs.org/dist/v{0}/node-v{0}-win-x64.zip' -f $env:NODE_VERSION) -OutFile 'nodejs.zip'; `
Expand-Archive nodejs.zip -DestinationPath C:\; `
Rename-Item "C:\\node-v16.15.1-win-x64" c:\nodejs;  `
setx /M PATH $('C:\nodejs;{0}' -f $env:PATH)

RUN New-Item -Type Directory $('{0}/.jenkins' -f $env:AGENT_ROOT) | Out-Null ; `
    New-Item -Type Directory $env:AGENT_WORKDIR | Out-Null

# .NET 6.0 install

ENV `
    # Enable detection of running in a container
    DOTNET_RUNNING_IN_CONTAINER=true `
    # Enable correct mode for dotnet watch (only mode supported in a container)
    DOTNET_USE_POLLING_FILE_WATCHER=true `
    # Skip extraction of XML docs - generally not useful within an image/container - helps performance
    NUGET_XMLDOC_MODE=skip `
    # PowerShell telemetry for docker image usage
    POWERSHELL_DISTRIBUTION_CHANNEL=PSDocker-DotnetCoreSDK-NanoServer-1909

RUN Write-Output $env:path; `
    $env:path = 'c:\dotnet;' + $env:path; `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
    Write-Output $env:path;

RUN `
    Invoke-WebRequest 'http://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1'; `
    ./dotnet-install.ps1 -Channel 6.0 -InstallDir 'C:\dotnet' ;

# CF CLI support#
RUN `
    wget 'https://packages.cloudfoundry.org/stable?release=windows64-exe&source=github&version=v6' -OutFile $env:tmp2Dir\\cf-cli_6.53.0_winx64.zip -UseBasicParsing ; `
    Expand-Archive $env:tmp2Dir\\cf-cli_6.53.0_winx64.zip -DestinationPath c:\\cf ; `
    $env:path = 'c:\cf;' + $env:path; `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
    Write-Output $env:path;
    
# Dos2Unix EOL conversion tool
RUN `
     wget 'https://waterlan.home.xs4all.nl/dos2unix/dos2unix-7.4.2-win64.zip' -OutFile $env:tmp2Dir\\dos2unix-7.4.2-win64.zip -UseBasicParsing ; `
     Expand-Archive $env:tmp2Dir\\dos2unix-7.4.2-win64.zip -DestinationPath c:\\dos2unix ; `
     $env:path = 'c:\dos2unix\bin;' + $env:path; `
     [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
     Write-Output $env:path;

VOLUME ${AGENT_ROOT}/.jenkins
VOLUME ${AGENT_WORKDIR}
WORKDIR ${AGENT_ROOT}

#RUN  NET USER my_admin /add
#RUN  NET LOCALGROUP Administrators /add my_admin
#USER my_admin
RUN Enable-PSRemoting -Force
#RUN winrm set winrm/config/client '@{TrustedHosts=”*”}'
#RuN Set-Item wsman:\localhost\client\trustedhosts *
#RUN `winrm set winrm/config/client '@{TrustedHosts=\"*\"}';`
RUN Set-Item WSMan:\localhost\Client\TrustedHosts -Force -Value *
#RUN winrm quickconfig -q 
#RUN winrm set winrm/config/service/Auth @{Basic=true}
#RUN winrm set winrm/config/service @{AllowUnencrypted=true}
#RUN winrm set winrm/config/winrs @{MaxMemoryPerShellMB=1024}
RUN Set-Service WinRM -StartMode Automatic
RUN Restart-Service WinRM
RUN Test-WsMan localhost

RUN `
    wget https://releases.hashicorp.com/vault/1.8.0/vault_1.8.0_windows_amd64.zip -OutFile $env:tmp2Dir\\vault-1.8.0.zip -UseBasicParsing ;`
    Expand-Archive $env:tmp2Dir\\vault-1.8.0.zip -DestinationPath c:\\vault ; `
    powershell Get-ChildItem -Path c:\\vault;`
    $env:path = 'C:\vault;' + $env:path; `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
    Write-Output $env:path;
RUN `
    wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile $env:tmp2Dir\\jq.exe -UseBasicParsing ;`
    mkdir c:\\jq;`
    Copy-Item -Path $env:tmp2Dir\\jq.exe -Destination c:\\jq\\jq.exe ;`
    powershell Get-ChildItem -Path c:\\jq;`
    $env:path = 'C:\jq;' + $env:path; `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
    Write-Output $env:path;

# RUN Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
# RUN choco install winscp -y
# EXPOSE 1433
# #RUN choco install ssdt15 -y
# #
# #
# #
# RUN `
#     mkdir c:\\install; `
#     (New-Object System.Net.WebClient).DownloadFile('https://go.microsoft.com/fwlink/?linkid=2139376', 'c:\install\SSDT-Setup-enu.exe');
	
# RUN `
#     wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-332.0.0-windows-x86_64-bundled-python.zip -OutFile $env:tmp2Dir\\gcp-332.zip -UseBasicParsing ;`
#     Expand-Archive $env:tmp2Dir\\gcp-332.zip -DestinationPath c:\\ ; `
#     powershell Get-ChildItem -Path c:\\google-cloud-sdk;`
#     c:\\google-cloud-sdk\bin\gcloud init;`
#     powershell Get-ChildItem -Path c:\\google-cloud-sdk\\bin;`
#     $env:path = 'C:\\google-cloud-sdk\\bin;' + $env:path; `
#     [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
#     Write-Output $env:path;
    
######################################
# Download and install Sonar Scanner

RUN `
    wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472.zip -OutFile $env:tmp2Dir\\sonar-scanner-cli-4.6.2.2472.zip -UseBasicParsing ;`
    Expand-Archive $env:tmp2Dir\\sonar-scanner-cli-4.6.2.2472.zip -DestinationPath c:\\sonar-scanner ; `
    $env:path = 'C:\sonar-scanner\sonar-scanner-4.6.2.2472\bin;' + $env:path; `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
    Write-Output $env:path;
RUN powershell Get-ChildItem -Path '"C:\sonar-scanner\sonar-scanner-4.6.2.2472"' –Recurse   

# Display the installed Sonar Scanner version
RUN powershell sonar-scanner -v 